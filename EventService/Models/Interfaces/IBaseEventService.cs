using EventService.Models.Entities;

namespace EventService.Models.Interfaces;

/// <summary>
/// Интерфейс для сервисов мероприятий
/// </summary>
public interface IBaseEventService
{
    /// <summary>
    /// Метод создания мероприятия
    /// </summary>
    /// <param name="start">Начало</param>
    /// <param name="end">Конец</param>
    /// <param name="title">Название</param>
    /// <param name="description">описание</param>
    /// <param name="idimage">изображение</param>
    /// <param name="idspace">пространство</param>
    /// <returns>Результат добавления</returns>
    public bool CreateEvent(DateTime start, DateTime end, string title, string description, Guid idimage, Guid idspace);

    /// <summary>
    /// Метод обновления мероприятия
    /// </summary>
    /// <param name="start">Начало</param>
    /// <param name="end">Конец</param>
    /// <param name="title">Название</param>
    /// <param name="description">описание</param>
    /// <param name="idimage">изображение</param>
    /// <param name="idspace">пространство</param>
    /// <param name="idevent">событие</param>
    /// <returns>Результат обновления</returns>
    public bool UpdateEvent(Guid idevent,DateTime? start, DateTime? end, string? title, string? description, Guid? idimage, Guid? idspace);

    /// <summary>
    /// удаление мероприятия
    /// </summary>
    /// <param name="idevent">мероприятие</param>
    /// <returns>результат удаления</returns>
    public bool DeleteEvent(Guid idevent);

    /// <summary>
    /// Получение всех мероприятий
    /// </summary>
    /// <returns>Список мероприятий</returns>
    public List<Event> GetAllEvents();

    /// <summary>
    /// Получения мероприятий на неделю
    /// </summary>
    /// <returns>Список мероприятий</returns>
    public List<Event> GetAllEventsForTheWeek();

    /// <summary>
    /// Заполение мероприятия бесплатными билетами
    /// </summary>
    /// <param name="count">количество билетов</param>
    /// <param name="idevent">мероприятие</param>
    /// <param name="isautogeneratedplaces">флаг автозаполения мест</param>
    /// <returns>Результат заполнения</returns>
    public bool SetFreeTickets(int count, Guid idevent, bool isautogeneratedplaces);

    /// <summary>
    /// Выдача билета на мероприятие
    /// </summary>
    /// <param name="idevent">мероприятия</param>
    /// <param name="idowner">пользователь</param>
    /// <returns>Билет</returns>
    public Ticket IssueTicket(Guid idevent, Guid idowner);

    /// <summary>
    /// Проверка наличия билета на мероприятие
    /// </summary>
    /// <param name="idevent">мероприятие</param>
    /// <param name="idowner">пользователь</param>
    /// <returns>наличие билета</returns>
    public bool HaveATicket(Guid idevent, Guid idowner);

    /// <summary>
    ///  Проверка наличия места у билета
    /// </summary>
    /// <param name="idevent">мероприятие</param>
    /// <param name="idticket">билет</param>
    /// <returns>место либо null</returns>
    public int? CheckSeat(Guid idevent, Guid idticket);
}
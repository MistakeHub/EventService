<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventService</name>
    </assembly>
    <members>
        <member name="T:EventService.Features.Event.Create.CreateEventCommand">
            <summary>
            Команда для создания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.End">
            <summary>
            Дата окончания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Create.CreateEventCommand.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Create.CreateEventCommandRequestHandler">
            <summary>
            Класс обработчик запроса команды создания мероприятия
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Create.CreateEventCommandRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,AutoMapper.IMapper)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Create.CreateEventCommandRequestHandler.Handle(EventService.Features.Event.Create.CreateEventCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Create.CreateEventCommandValidation">
            <summary>
            Класс конфигурации валидации команды создания мероприятия
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Create.CreateEventCommandValidation.#ctor">
            <summary>
            Конфигурация валидации команды создания мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Event">
            <summary>
            Класс Мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Id">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.End">
            <summary>
            Дата окончания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Tickets">
            <summary>
            Билеты на мероприятие
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.HaveTicketsSeats">
            <summary>
            Флаг наличия мест у билетов
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.IsTicketsAvailable">
            <summary>
            Проверка наличия свободных билетов
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Event.Price">
            <summary>
            Цена за билет
            </summary>
        </member>
        <member name="T:EventService.Features.Event.EventsController">
            <summary>
            Контроллер мероприятия
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.EventsController.#ctor(MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.GetAll">
            <summary>
            Метод возращающий коллекцию мероприятий
            </summary>
        </member>
        <member name="M:EventService.Features.Event.EventsController.Post(EventService.Features.Event.RequestCreateEventModel)">
            <summary>
            Метод создающий мероприятие
            </summary>
            <response code="200">Событие создано</response>
            <response code="400">Событие не было создано</response>
            <param name="model">Тестовое значение для idImage и idSpace:7febf16f-651b-43b0-a5e3-0da8da49e90d </param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.Put(System.String,EventService.Features.Event.UpdateEventModel)">
            <summary>
            Метод Обновляет информацию об определённом событие
            </summary>
            <response code="200">Событие было обновлено</response>
            <response code="400">Событие не было обновлено</response>
            <param name="idEvent">id мероприятия</param>
            <param name="model">Тестовое значение для idImage и idSpace:7febf16f-651b-43b0-a5e3-0da8da49e90d </param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.Delete(System.String)">
            <summary>
            Метод удаляет определённое событие
            </summary>
            <response code="200">Событие удалено</response>
            <response code="400">Событие не было удалено</response>
            <param name="idEvent">id события</param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.GetAllOfTheWeek">
            <summary>
            Метод возвращающий все события, запланированные на неделю
            </summary>
        </member>
        <member name="M:EventService.Features.Event.EventsController.Put(System.String,System.Int32,System.Boolean)">
            <summary>
            Метод создаёт билеты на определённое мероприятие определённого количества
            </summary>
            <response code="200">Билеты были успешно созданы</response>
            <response code="400">Билеты не были созданы</response>
            <param name="idEvent">Id мероприятия</param>
            <param name="count">количество билетов</param>
            <param name="isAutoGeneratedPlaces">Флаг автогенерации места для билета</param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.HaveATicket(System.String,System.String)">
            <summary>
            Проверяет у определённого пользователя наличие билета на определённое мероприятие
            </summary>
            <param name="idEvent">Id мероприятия</param>
            /// <param name="idOwner">Id предпологаемого владельца</param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.IssueTicket(System.String,System.String,System.Decimal)">
            <summary>
            Выдаёт билет на определённое мероприятие определённому пользователю
            </summary>
            <response code="200">Билет был успешно выдан</response>
            <response code="400">Билет не был выдан</response>
            <param name="idEvent">Id мероприятия</param>
            <param name="idOwner">Id пользователя</param>
            <param name="price">цена за билет</param>
        </member>
        <member name="M:EventService.Features.Event.EventsController.CheckTicket(System.String,System.String)">
            <summary>
            Метод Проверяет, зарезервированно ли место на определённый билет
            </summary>
            <response code="200">У билета есть место</response>
            <response code="400">У билета не назначенно место</response>
            <param name="idEvent">Id мероприятия</param>
            <param name="idTicket">Id билета</param>
        </member>
        <member name="T:EventService.Features.Event.EventViewModel">
            <summary>
            View model для мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.Id">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.HaveTicketsSeats">
            <summary>
            Флаг наличия мест у билетов
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.IsTicketsAvailable">
            <summary>
            Проверка наличия свободных билетов
            </summary>
        </member>
        <member name="P:EventService.Features.Event.EventViewModel.Price">
            <summary>
            цена
            </summary>
        </member>
        <member name="T:EventService.Features.Event.GetAllForTheWeek.GetAllEventsForTheWeekCommand">
            <summary>
            Команда получения всех мероприятий на неделю
            </summary>
        </member>
        <member name="T:EventService.Features.Event.GetAllForTheWeek.GetAllEventsForTheWeekCommandQueryHandler">
            <summary>
            Класс обработчик команды получения всех мероприятий на неделю
            </summary>
        </member>
        <member name="M:EventService.Features.Event.GetAllForTheWeek.GetAllEventsForTheWeekCommandQueryHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,AutoMapper.IMapper)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Event.GetAllForTheWeek.GetAllEventsForTheWeekCommandQueryHandler.Handle(EventService.Features.Event.GetAllForTheWeek.GetAllEventsForTheWeekCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Event.GetAll.GetAllEventsCommand">
            <summary>
            Команда для получения всех мероприятий
            </summary>
        </member>
        <member name="T:EventService.Features.Event.GetAll.GetAllEventsCommandQueryHandler">
            <summary>
            Класс обработчик команды получения всех мероприятий
            </summary>
        </member>
        <member name="M:EventService.Features.Event.GetAll.GetAllEventsCommandQueryHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,AutoMapper.IMapper)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Event.GetAll.GetAllEventsCommandQueryHandler.Handle(EventService.Features.Event.GetAll.GetAllEventsCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Remove.Notifications.RemoveEventNotify">
            <inheritdoc />
        </member>
        <member name="P:EventService.Features.Event.Remove.Notifications.RemoveEventNotify.IdEvent">
            <summary>
            Id мероприятия 
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Remove.Notifications.RemoveEventNotifyHandler">
            <inheritdoc />
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.Remove.Notifications.RemoveEventNotifyHandler.#ctor(MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:EventService.Features.Event.Remove.Notifications.RemoveEventNotifyHandler.Handle(EventService.Features.Event.Remove.Notifications.RemoveEventNotify,System.Threading.CancellationToken)">
            <summary>
            Хэндлер 
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:EventService.Features.Event.Remove.RemoveEventCommand">
            <summary>
            Команда удаления мероприятия 
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Remove.RemoveEventCommand.Id">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Remove.RemoveEventCommandRequestHandler">
            <summary>
            Класс обработчик команды удаления мероприятия
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.Remove.RemoveEventCommandRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Remove.RemoveEventCommandRequestHandler.Handle(EventService.Features.Event.Remove.RemoveEventCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик 
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Remove.RemoveEventCommandValidation">
            <summary>
            Класс конфигурации валидации команды удаления мероприятия
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Remove.RemoveEventCommandValidation.#ctor">
            <summary>
            конфигурация
            </summary>
        </member>
        <member name="T:EventService.Features.Event.RequestCreateEventModel">
            <summary>
            Модель данных для создания мероприятий
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.End">
            <summary>
            Дата окончания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.RequestCreateEventModel.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Event.UpdateEventModel">
            <summary>
            Модель для обновления мероприятий
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.End">
            <summary>
            Дата окончания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.UpdateEventModel.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEvent">
            <summary>
            Команда оповещения об удалении изображения 
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEvent.IdImage">
            <summary>
            Id изображения
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEventHandler">
            <summary>
            Оповещение об удалении изображения
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEventHandler.#ctor(MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEventHandler.Handle(EventService.Features.Event.Update.Notifications.RemoveImage.RemoveImageUpdateEvent,System.Threading.CancellationToken)">
            <summary>
            Хэндлер 
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEvent">
            <summary>
            Команда оповещения об удалении пространства 
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEvent.IdSpace">
            <summary>
            Id пространства
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEvent.IdEvent">
            <summary>
            Id мероприятия 
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEventHandler">
            <summary>
            Оповещение об удалении пространства
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEventHandler.#ctor(MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEventHandler.Handle(EventService.Features.Event.Update.Notifications.RemoveSpace.RemoveSpaceUpdateEvent,System.Threading.CancellationToken)">
            <summary>
            Хэндлер 
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:EventService.Features.Event.Update.UpdateEventCommand">
            <summary>
            Команда обновления мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.Id">
             <summary>
            Id мероприятия
             </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.Start">
            <summary>
            Дата начала мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.End">
            <summary>
            Дата окончания мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.Title">
            <summary>
            Название мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.Description">
            <summary>
            Описание мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.Price">
            <summary>
            Цена
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.IdImage">
            <summary>
            Id изображения мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Event.Update.UpdateEventCommand.IdSpace">
            <summary>
            Id пространства мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Update.UpdateEventCommandRequestHandler">
            <summary>
            Класс обработчик команды обновления мероприятия
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Event.Update.UpdateEventCommandRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,MediatR.IMediator,AutoMapper.IMapper)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Update.UpdateEventCommandRequestHandler.Handle(EventService.Features.Event.Update.UpdateEventCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик 
            </summary>
        </member>
        <member name="T:EventService.Features.Event.Update.UpdateEventCommandValidation">
            <summary>
            Класс конфигурации валидации команды обновления мероприятия
            </summary>
        </member>
        <member name="M:EventService.Features.Event.Update.UpdateEventCommandValidation.#ctor">
            <summary>
            Конфигурация
            </summary>
        </member>
        <member name="T:EventService.Features.Filters.ExceptionFilter">
            <summary>
            Фильтр обработки исключений 
            </summary>
        </member>
        <member name="M:EventService.Features.Filters.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Обработчик
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:EventService.Features.Filters.ValidationBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:EventService.Features.Filters.ValidationBehavior`2.#ctor(System.Collections.Generic.IEnumerable{FluentValidation.IValidator{`0}})">
            <summary>
            Конструктор
            </summary>
            <param name="validators"></param>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Filters.ValidationBehavior`2.Handle(`0,MediatR.RequestHandlerDelegate{`1},System.Threading.CancellationToken)">
            <summary>
            Хэндлер
            </summary>
        </member>
        <member name="T:EventService.Features.Image.IsExists.ImageExistsCommand">
            <summary>
            Команда проверки наличия изображения
            </summary>
        </member>
        <member name="P:EventService.Features.Image.IsExists.ImageExistsCommand.Id">
            <summary>
            Id изображения
            </summary>
        </member>
        <member name="P:EventService.Features.Image.IsExists.ImageExistsCommand.Authorization">
            <summary>
            поле для метода авторизации
            </summary>
        </member>
        <member name="T:EventService.Features.Image.IsExists.ImageExistsCommandQueryHandler">
            <summary>
            Класс обработчик команды проверки наличия изображения
            </summary>
        </member>
        <member name="M:EventService.Features.Image.IsExists.ImageExistsCommandQueryHandler.#ctor(EventService.ObjectStorage.HttpService.HttpServiceClient)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Image.IsExists.ImageExistsCommandQueryHandler.Handle(EventService.Features.Image.IsExists.ImageExistsCommand,System.Threading.CancellationToken)">
            <summary>
            обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.RabbitMq.EventMessage">
            <summary>
            Модель Событийного сообщения
            </summary>
        </member>
        <member name="P:EventService.Features.RabbitMq.EventMessage.Type">
            <summary>
            Тип события
            </summary>
        </member>
        <member name="P:EventService.Features.RabbitMq.EventMessage.IdEntity">
            <summary>
            Id элемента
            </summary>
        </member>
        <member name="T:EventService.Features.RabbitMq.TypeEvent">
            <summary>
            Типы событий
            </summary>
        </member>
        <member name="F:EventService.Features.RabbitMq.TypeEvent.SpaceDeleteEvent">
            <summary>
            Событие удаления пространства
            </summary>
        </member>
        <member name="F:EventService.Features.RabbitMq.TypeEvent.ImageDeleteEvent">
            <summary>
            Событие удаление изображения
            </summary>
        </member>
        <member name="F:EventService.Features.RabbitMq.TypeEvent.EventDeleteEvent">
            <summary>
            Событие удаление мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessage">
            <summary>
            Команда отправки сообщения в очередь сообщений
            </summary>
        </member>
        <member name="P:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessage.Message">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="P:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessage.Queyename">
            <summary>
            Название очереди
            </summary>
        </member>
        <member name="T:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessageRequestHandler">
            <inheritdoc />
        </member>
        <member name="M:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessageRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseRabbitMqService)">
            <summary>
            Конструктор
            </summary>
            <param name="baseRabbitMqService"></param>
        </member>
        <member name="M:EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessageRequestHandler.Handle(EventService.Features.RabbitMq.SendMessage.SendRabbitMqMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:EventService.Features.Space.IsExists.SpaceExistsCommand">
            <summary>
             Команда проверки наличия пространства
            </summary>
        </member>
        <member name="P:EventService.Features.Space.IsExists.SpaceExistsCommand.Id">
            <summary>
            Id пространства
            </summary>
        </member>
        <member name="P:EventService.Features.Space.IsExists.SpaceExistsCommand.Authorization">
            <summary>
            поле для типа авторизации
            </summary>
        </member>
        <member name="T:EventService.Features.Space.IsExists.SpaceExistsCommandQueryHandler">
            <summary>
            Класс обработчик команды проверки наличия изображения
            </summary>
        </member>
        <member name="M:EventService.Features.Space.IsExists.SpaceExistsCommandQueryHandler.#ctor(EventService.ObjectStorage.HttpService.HttpServiceClient)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Space.IsExists.SpaceExistsCommandQueryHandler.Handle(EventService.Features.Space.IsExists.SpaceExistsCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.CheckSeat.CheckSeatCommand">
            <summary>
            Команда проверки наличия места
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.CheckSeat.CheckSeatCommand.IdEvent">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.CheckSeat.CheckSeatCommand.IdTicket">
            <summary>
            Id места
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.CheckSeat.CheckSeatCommandQueryHandler">
            <summary>
            Класс обработчик команды проверки наличия места
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.CheckSeat.CheckSeatCommandQueryHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.CheckSeat.CheckSeatCommandQueryHandler.Handle(EventService.Features.Ticket.CheckSeat.CheckSeatCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.HaveATicket.HaveATicketCommand">
            <summary>
            Команда проверки наличия билета на мероприятие
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.HaveATicket.HaveATicketCommand.IdOwner">
            <summary>
            Id пользователя
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.HaveATicket.HaveATicketCommand.IdEvent">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.HaveATicket.HaveATicketCommandQueryHandler">
            <summary>
            Класс обработчик команды проверки наличия билета
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.HaveATicket.HaveATicketCommandQueryHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService)">
            <summary>
            Конструктор
            </summary>
            <param name="baseEventService"></param>
        </member>
        <member name="M:EventService.Features.Ticket.HaveATicket.HaveATicketCommandQueryHandler.Handle(EventService.Features.Ticket.HaveATicket.HaveATicketCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.IssueATicketCommand">
            <summary>
            Команда выдачи билета на мероприятие
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.IssueATicketCommand.IdEvent">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.IssueATicketCommand.IdOwner">
            <summary>
            Id пользователя
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.IssueATicketCommand.Price">
            <summary>
            Цена
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.IssueATicketCommand.Authorization">
            <summary>
            поле для метода авторизации
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.IssueATicketCommandRequestHandler">
            <summary>
            Класс обработчик команды выдачи билета на мероприятие
            </summary>
        </member>
	    <!-- ReSharper disable once MarkupAttributeTypo -->
	    <member name="M:EventService.Features.Ticket.IssueATicket.IssueATicketCommandRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService,EventService.ObjectStorage.HttpService.HttpServiceClient,MediatR.IMediator)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.IssueATicket.IssueATicketCommandRequestHandler.Handle(EventService.Features.Ticket.IssueATicket.IssueATicketCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEvent">
            <summary>
            Событие отмены платежной операции 
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEvent.IdPayment">
            <summary>
            Id Платежной операции
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEventHandler">
            <summary>
            Отмена платежной операции
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEventHandler.#ctor(EventService.ObjectStorage.HttpService.HttpServiceClient)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEventHandler.Handle(EventService.Features.Ticket.IssueATicket.notifications.CanclellationPayment.CancellationPaymentEvent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEvent">
            <summary>
            Событие подтверждения платежной операции
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEvent.IdPayment">
            <summary>
            Id платежной операции
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEventHandler">
            <summary>
            Подтверждение платежной операции 
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEventHandler.#ctor(EventService.ObjectStorage.HttpService.HttpServiceClient)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEventHandler.Handle(EventService.Features.Ticket.IssueATicket.notifications.ConfirmationPayment.ConfirmationPaymentEvent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommand">
            <summary>
            Команда заполнения мероприятия бесплатными билетами
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommand.IdEvent">
            <summary>
            Id мероприятия
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommand.Count">
            <summary>
            Количества билетов
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommand.IsAutoGeneratePlaces">
            <summary>
            Поле указывающая: требуется ли автогенерация мест для билетов
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommandRequestHandler">
            <summary>
            Класс обработчик заполнения мероприятия бесплатными билетами
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommandRequestHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseEventService)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommandRequestHandler.Handle(EventService.Features.Ticket.SetFreeTickets.SetFreeTicketsCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.Ticket.Ticket">
            <summary>
            Билет
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.Ticket.Id">
            <summary>
            Id билета
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.Ticket.IdOwner">
            <summary>
            Id владельца
            </summary>
        </member>
        <member name="P:EventService.Features.Ticket.Ticket.Seat">
            <summary>
            Место
            </summary>
        </member>
        <member name="T:EventService.Features.User.IsExists.UserExistsCommand">
            <summary>
            Команда проверки наличия пользователя
            </summary>
        </member>
        <member name="P:EventService.Features.User.IsExists.UserExistsCommand.Id">
            <summary>
            Id пользователя
            </summary>
        </member>
        <member name="T:EventService.Features.User.IsExists.UserExistsCommandQueryHandler">
            <summary>
            Класс обработчик команды проверки наличия пользователя
            </summary>
        </member>
        <member name="M:EventService.Features.User.IsExists.UserExistsCommandQueryHandler.#ctor(EventService.Infrastructure.Interfaces.IBaseUserService)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Features.User.IsExists.UserExistsCommandQueryHandler.Handle(EventService.Features.User.IsExists.UserExistsCommand,System.Threading.CancellationToken)">
            <summary>
            Обработчик
            </summary>
        </member>
        <member name="T:EventService.Features.User.User">
            <summary>
            Пользователь
            </summary>
        </member>
        <member name="P:EventService.Features.User.User.Id">
            <summary>
            Id пользователя
            </summary>
        </member>
        <member name="P:EventService.Features.User.User.Nickname">
            <summary>
            Ник пользователя
            </summary>
        </member>
        <member name="T:EventService.Identity.Selector">
            <summary>
            
            </summary>
        </member>
        <member name="M:EventService.Identity.Selector.ForwardReferenceToken(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:EventService.Identity.Selector.GetSchemeAndCredential(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
        </member>
        <member name="T:EventService.Infrastructure.InterfaceImplements.BaseUserService">
            <summary>
            Сервис для работы с пользователями 
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.BaseUserService.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.BaseUserService.IsUserExists(System.Guid)">
            <summary>
            Проверка наличия пользователя
            </summary>
        </member>
        <member name="T:EventService.Infrastructure.InterfaceImplements.EventMongoDbService">
            <summary>
            Сервис работы с Мероприятиями посредством MongoDb
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.#ctor(MongoDB.Driver.MongoClient)">
            <summary>
            Конструктор с начальной инициализацией Базы данных
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.CreateEvent(EventService.Features.Event.Event)">
            <summary>
            Метод создания мероприятия 
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.DeleteEvent(System.Guid)">
            <summary>
            Метод Удаления мероприятия 
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.GetAllEvents">
            <summary>
            Метод получения всех мероприятий
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.GetAllEventsForTheWeek">
            <summary>
            Метод получения всех мероприятий на неделю
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.SetFreeTickets(EventService.Features.Event.Event)">
             <summary>
            Метод заполения бесплатных билетов на определённое мероприятие
             </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.IssueTicket(EventService.Features.Event.Event)">
            <summary>
            Метод выдачи билета на мероприятие
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.HaveATicket(EventService.Features.Event.Event,System.Guid)">
            <summary>
            Метод проверки наличия билета у пользователя на мероприятие
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.UpdateEvent(EventService.Features.Event.Event)">
            <summary>
            Метод обновления мероприятия
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.CheckSeat(EventService.Features.Event.Event,System.Guid)">
            <summary>
            Метод проверки наличия места у билета
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.InterfaceImplements.EventMongoDbService.GetEventById(System.Guid)">
            <summary>
            Получить мероприятие
            </summary>
            <param name="idevent">id мероприятия</param>
            <returns></returns>
        </member>
        <member name="T:EventService.Infrastructure.Interfaces.IBaseEventService">
            <summary>
            Интерфейс для сервисов мероприятий
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.CreateEvent(EventService.Features.Event.Event)">
            <summary>
            Метод создания мероприятия
            </summary>
            <param name="eventDefault">Мероприятие</param>
            <returns>Результат добавления</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.UpdateEvent(EventService.Features.Event.Event)">
            <summary>
            Метод обновления мероприятия
            </summary>
            <param name="updateEvent">Мероприятие</param>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.DeleteEvent(System.Guid)">
            <summary>
            удаление мероприятия
            </summary>
            <param name="idevent">мероприятие</param>
            <returns>результат удаления</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.GetAllEvents">
            <summary>
            Получение всех мероприятий
            </summary>
            <returns>Список мероприятий</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.GetAllEventsForTheWeek">
            <summary>
            Получения мероприятий на неделю
            </summary>
            <returns>Список мероприятий</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.SetFreeTickets(EventService.Features.Event.Event)">
            <summary>
            Заполение мероприятия бесплатными билетами
            </summary>
            <param name="eventDefault">мероприятие</param>
            <returns>Результат заполнения</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.IssueTicket(EventService.Features.Event.Event)">
            <summary>
            Выдача билета на мероприятие
            </summary>
            <param name="eventDefault">мероприятия</param>
            <returns>Результат</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.HaveATicket(EventService.Features.Event.Event,System.Guid)">
            <summary>
            Проверка наличия билета на мероприятие
            </summary>
            <param name="eventDefault">мероприятие</param>
            <param name="idowner">пользователь</param>
            <returns>наличие билета</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.CheckSeat(EventService.Features.Event.Event,System.Guid)">
            <summary>
             Проверка наличия места у билета
            </summary>
            <param name="eventDefault">мероприятие</param>
            <param name="idticket">билет</param>
            <returns>место либо null</returns>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseEventService.GetEventById(System.Guid)">
            <summary>
            Получения мероприятия по Id
            </summary>
            <param name="idevent"></param>
        </member>
        <member name="T:EventService.Infrastructure.Interfaces.IBaseRabbitMqService">
            <summary>
            Интерфейс для работы RabbitMq
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseRabbitMqService.SendMessage``1(``0,System.String)">
            <summary>
            отправление сообщение в очередь
            </summary>
            <param name="message"></param>
            <param name="queyename"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EventService.Infrastructure.Interfaces.IBaseUserService">
            <summary>
            Интерфейс для сервисов пользователей
            </summary>
        </member>
        <member name="M:EventService.Infrastructure.Interfaces.IBaseUserService.IsUserExists(System.Guid)">
            <summary>
            проверка наличия пользователя
            </summary>
            <param name="iduser">пользователь</param>
            <returns>результат проверки</returns>
        </member>
        <member name="T:EventService.ObjectStorage.Helpers.ServiceRegister">
            <summary>
            Класс расширения, предназначенный для регистрации сервисов
            </summary>
        </member>
        <member name="M:EventService.ObjectStorage.Helpers.ServiceRegister.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Метод расширения, предназначенный для регистрации сервисов
            </summary>
        </member>
        <member name="T:EventService.ObjectStorage.HttpService.HttpServiceClient">
            <summary>
            сервис для работы с http
            </summary>
        </member>
        <member name="M:EventService.ObjectStorage.HttpService.HttpServiceClient.#ctor(System.Net.Http.IHttpClientFactory)">
            <summary>
            Конструктор
            </summary>
            <param name="httpClientFactory"></param>
        </member>
        <member name="M:EventService.ObjectStorage.HttpService.HttpServiceClient.SendRequest``1(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            отправка запроса
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <param name="method"></param>
            <param name="contents"></param>
            <param name="authorization"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:EventService.ObjectStorage.RabbitMqService.BaseRabbitMqService">
            <summary>
            Сервис для работы с RabbitMq
            </summary>
        </member>
        <member name="M:EventService.ObjectStorage.RabbitMqService.BaseRabbitMqService.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            конструктор
            </summary>
        </member>
        <member name="M:EventService.ObjectStorage.RabbitMqService.BaseRabbitMqService.SendMessage``1(``0,System.String)">
            <summary>
            Отправка сообщения
            </summary>
            <param name="message"></param>
            <param name="queyename"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EventService.ObjectStorage.RabbitMqService.BaseRabbitMqService.Dispose">
            <inheritdoc />
        </member>
        <member name="T:EventService.ObjectStorage.ViewModels.Mappers.EventServiceMapper">
            <summary>
            Класс конфигурации маппера 
            </summary>
        </member>
        <member name="M:EventService.ObjectStorage.ViewModels.Mappers.EventServiceMapper.#ctor">
            <summary>
            Конфигурация
            </summary>
        </member>
    </members>
</doc>

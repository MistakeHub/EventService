using EventService.Models.Entities;
using EventService.Models.Interfaces;
using MongoDB.Driver;


namespace EventService.Infrastructure.InterfaceImplements;

/// <summary>
/// Сервис работы с Мероприятиями посредством MongoDb
/// </summary>
public class EventMongoDbService : IBaseEventService
{
    private readonly IMongoCollection<Event> _events;
    private const string CollectionName = "events";

    /// <summary>
    /// Конструктор с начальной инициализацией Базы данных
    /// </summary>

    public EventMongoDbService(MongoClient mongo)
    {
        _events = DataBaseInitialize(mongo);

    }

    /// <summary>
    /// Метод создания мероприятия 
    /// </summary>

    public bool CreateEvent(DateTime start, DateTime end, string title, string description, Guid idimage, Guid idspace)
    {
        try
        {
            _events.InsertOne(new Event
            {
                Start = start, End = end, Title = title, Description = description, IdImage = idimage, IdSpace = idspace
            });
            return _events.Find(v => v.Title == title) != null;
        }
        catch (Exception)
        {
            return false;
        }

    }

    /// <summary>
    /// Метод Удаления мероприятия 
    /// </summary>
    public bool DeleteEvent(Guid idevent)
    {
        try
        {
            return _events.Find(v => v.Id == idevent).FirstOrDefault() != null &&
                   _events.DeleteOne(v => v.Id == idevent).DeletedCount > 0;
        }
        catch (Exception)
        {
            return false;
        }
    }

    /// <summary>
    /// Метод получения всех мероприятий
    /// </summary>

    public List<Event> GetAllEvents()
    {
        try
        {
            return _events.Find(v => true).ToList();
        }
        catch (Exception)
        {
            return null!;
        }
    }

    /// <summary>
    /// Метод получения всех мероприятий на неделю
    /// </summary>

    public List<Event> GetAllEventsForTheWeek()
    {
        try
        {
            var start = DateTime.UtcNow;

            var end = start.AddDays(7);

            return _events.Find(v => v.Start > start || v.End <= end).ToList();
        }
        catch (Exception)
        {
            return null!;
        }
    }

    /// <summary>
    ///Метод заполения бесплатных билетов на определённое мероприятие
    /// </summary>

    public bool SetFreeTickets(int count, Guid idevent, bool isautogeneratedplaces)
    {
        try
        {
            var ticketList = new List<Ticket>();
            if (_events.Find(v => v.Id == idevent).FirstOrDefault() == null) return false;

            // ReSharper disable once SuggestVarOrType_BuiltInTypes
            for (int i = 1; i <= count; i++) ticketList.Add(new Ticket { Seat = isautogeneratedplaces ? i : null });

            var update = Builders<Event>.Update.Set(v => v.Tickets, ticketList);

            return _events.UpdateOne(v => v.Id == idevent, update).ModifiedCount > 0;
        }
        catch (Exception)
        {
            return false;
        }
    }

    /// <summary>
    /// Метод выдачи билета на мероприятие
    /// </summary>

    public Ticket IssueTicket(Guid idevent, Guid idowner)
    {
        try
        {
            var eventDefault = _events.Find(v => v.Id == idevent).FirstOrDefault();
            if (eventDefault is not { IsTicketsAvailable: true }) return null!;
            {
                var desireTicket = eventDefault.Tickets.FirstOrDefault();
                if (desireTicket == null) return null!;
                desireTicket.IdOwner = idowner;
                var update = Builders<Event>.Update.Set(v => v.Tickets, eventDefault.Tickets);
                _events.UpdateOne(v => eventDefault.Id == v.Id, update);
                return desireTicket;
            }
        }
        catch(Exception)
        {
            return null!;
        }

    }

    /// <summary>
    /// Метод проверки наличия билета у пользователя на мероприятие
    /// </summary>

    public bool HaveATicket(Guid idevent, Guid idowner)
    {
        try
        {
            var eventDefault = _events.Find(v => v.Id == idevent).FirstOrDefault();
            return eventDefault != null && eventDefault.Tickets.Any(v => v.IdOwner == idowner);
        }
        catch (Exception)
        {
            return false;
        }
    }

    /// <summary>
    /// Метод обновления мероприятия
    /// </summary>

    public bool UpdateEvent(Guid idevent, DateTime? start, DateTime? end, string? title, string? description, Guid? idimage, Guid? idspace)
    {
        try
        {
            var uploadingEvent = _events.Find(v => v.Id == idevent).FirstOrDefault();

            if (uploadingEvent == null) return false;
            {
                var update = Builders<Event>.Update;
                var updateDefinitions = new List<UpdateDefinition<Event>>();
                if (start != null && start != uploadingEvent.Start)
                    updateDefinitions.Add(update.Set(v => v.Start, start));
                if (end != null && end != uploadingEvent.End) updateDefinitions.Add(update.Set(v => v.End, end));
                if (title != uploadingEvent.Title) updateDefinitions.Add(update.Set(v => v.Title, title));
                if (description != uploadingEvent.Description)
                    updateDefinitions.Add(update.Set(v => v.Description, description));
                if (idimage != uploadingEvent.IdImage) updateDefinitions.Add(update.Set(v => v.IdImage, idimage));
                if (idspace != uploadingEvent.IdSpace ) updateDefinitions.Add(update.Set(v => v.IdSpace, idspace));
                var finalUpdate = update.Combine(updateDefinitions);
                return _events.UpdateOne(v => uploadingEvent.Id == v.Id, finalUpdate).IsAcknowledged;
            }
        }
        catch (Exception)
        {
            return false;
        }

    }

    // ReSharper disable once MemberCanBeMadeStatic.Local решарпер предлагает сделать метод статичным, но в этом нет никакого смысла
    // ReSharper disable once SuggestBaseTypeForParameter
    private IMongoCollection<Event> DataBaseInitialize(MongoClient client)
    {

        // ReSharper disable once StringLiteralTypo
        var database = client.GetDatabase("eventdb");

        var collection = database.GetCollection<Event>(CollectionName);

        if (database.ListCollections().FirstOrDefault() != null) return collection;
        database.CreateCollection(CollectionName);
        collection.InsertOne(new Event { Id = Guid.Parse("00000000-0000-0000-0000-000000000000"), Description = "TestDescription", Start = DateTime.UtcNow, End = DateTime.UtcNow.AddDays(1), Title = "TestTitle", IdImage = Guid.Parse("7febf16f-651b-43b0-a5e3-0da8da49e90d"), IdSpace = Guid.Parse("7febf16f-651b-43b0-a5e3-0da8da49e90d") });

        return collection;
    }

    /// <summary>
    /// Метод проверки наличия места у билета
    /// </summary>

    public int? CheckSeat(Guid idevent, Guid idticket)
    {
        try
        {
            return _events.Find(v => v.Id == idevent).FirstOrDefault().Tickets.FirstOrDefault(v => v.Id == idticket)
                ?.Seat;
        }
        catch (Exception)
        {
            return null!;
        }
    }

    /// <summary>
    /// Метод удаления изображения мероприятия
    /// </summary>
    /// <param name="idevent"></param>
    /// <returns></returns>
    public Guid? RemoveEventImageById(Guid idevent)
    {
        try
        {
            var uploadingEvent = _events.Find(v => v.Id == idevent).FirstOrDefault();

            if (uploadingEvent == null) return Guid.Empty;
            {
                var image = uploadingEvent.IdImage;
                var update = Builders<Event>.Update.Set(v => v.IdImage, null);


                return _events.UpdateOne(v => uploadingEvent.Id == v.Id, update).IsAcknowledged ? image : Guid.Empty;
            }
        }
        catch (Exception)
        {
            return Guid.Empty;
        }
    }


    /// <summary>
    /// Метод удаления пространства мероприятия
    /// </summary>
    /// <param name="idevent"></param>
    /// <returns></returns>
    public Guid? RemoveSpaceEventById(Guid idevent)
    {
        try
        {
            var uploadingEvent = _events.Find(v => v.Id == idevent).FirstOrDefault();

            if (uploadingEvent == null) return Guid.Empty;
            {
                var space = uploadingEvent.IdSpace;
                var update = Builders<Event>.Update.Set(v => v.IdSpace, null);


                return _events.UpdateOne(v => uploadingEvent.Id == v.Id, update).IsAcknowledged ? space : Guid.Empty;
            }
        }
        catch (Exception)
        {
            return Guid.Empty;
        }
    }
}